// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudioManager.Infrastructure;

#nullable disable

namespace StudioManager.Infrastructure.Migrations
{
    [DbContext(typeof(StudioManagerDbContext))]
    [Migration("20240601213731_AddUser")]
    partial class AddUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudioManager.Domain.Entities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EquipmentTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipment_type_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("initial_quantity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_equipments");

                    b.HasIndex("EquipmentTypeId")
                        .HasDatabaseName("ix_equipments_equipment_type_id");

                    b.ToTable("equipments", (string)null);
                });

            modelBuilder.Entity("StudioManager.Domain.Entities.EquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_equipment_types");

                    b.ToTable("equipment_types", (string)null);
                });

            modelBuilder.Entity("StudioManager.Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipment_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("ix_reservations_equipment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reservations_user_id");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("StudioManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<Guid>("KeycloakId")
                        .HasColumnType("uuid")
                        .HasColumnName("keycloak_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("StudioManager.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("StudioManager.Domain.Entities.EquipmentType", "EquipmentType")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipments_equipment_types_equipment_type_id");

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("StudioManager.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("StudioManager.Domain.Entities.Equipment", "Equipment")
                        .WithMany("Reservations")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_equipments_equipment_id");

                    b.HasOne("StudioManager.Domain.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_users_user_id");

                    b.Navigation("Equipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudioManager.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("StudioManager.Domain.Entities.EquipmentType", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("StudioManager.Domain.Entities.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
